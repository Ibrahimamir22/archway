version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    # Internal port only, Nginx will expose to the world
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=/api/v1
      - NEXT_PUBLIC_BACKEND_URL=
      - NEXT_TELEMETRY_DISABLED=1
      # Hybrid footer data fetching configuration - production settings
      - NEXT_PUBLIC_USE_MOCK_API=true
      - NEXT_PUBLIC_PREFER_BACKEND=true
      - NEXT_PUBLIC_FALLBACK_TO_MOCK=true
      - NEXT_PUBLIC_LOG_DATA_FETCHING=false
      - NEXT_PUBLIC_MOCK_API_PATH=/api
      - HOSTNAME=0.0.0.0
    depends_on:
      - backend
    restart: always
    command: npm run start

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Internal port only, Nginx will expose to the world
    expose:
      - "8000"
    volumes:
      - backend_media:/app/media
      - static_files:/app/static
    env_file:
      - ./backend/.env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=interior_platform.settings.production
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
    restart: always
    command: gunicorn interior_platform.wsgi:application --bind 0.0.0.0:8000

  db:
    image: postgres:14
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env.prod
    environment:
      - POSTGRES_DB=${DB_NAME:-archway}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    # No external port in production
    expose:
      - "5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_files:/app/static
      - backend_media:/app/media
      # Uncomment for SSL
      # - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
    restart: always

volumes:
  postgres_data_prod:
  backend_media:
  static_files: 