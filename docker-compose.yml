version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    env_file:
      - ./frontend/.env.local
    environment:
      - NODE_ENV=development
      # For Docker container-to-container communication
      - NEXT_PUBLIC_API_URL=http://backend:8000/api/v1
      # For browser access to backend API
      - NEXT_PUBLIC_API_BROWSER_URL=http://localhost:8000/api/v1
      # For direct links to backend
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8000
      - NEXT_PUBLIC_BACKEND_BROWSER_URL=http://localhost:8000
      # Use browser URLs for in-browser rendering
      - NEXT_PUBLIC_FORCE_LOCAL_URLS=true
      # Use real backend API, only fallback to mock if needed
      - NEXT_PUBLIC_USE_MOCK_API=false
      - NEXT_PUBLIC_PREFER_BACKEND=true
      - NEXT_PUBLIC_FALLBACK_TO_MOCK=true
      - NEXT_PUBLIC_LOG_DATA_FETCHING=true
      - NEXT_PUBLIC_MOCK_API_PATH=/api
      - HOSTNAME=0.0.0.0
    depends_on:
      - backend
    command: ["npm", "run", "dev"]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=interior_platform.settings.development
      - DEBUG=True
      - DB_HOST=db
      - DB_NAME=archway
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "python manage.py wait_for_db &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=archway
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d archway"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  frontend_node_modules: 